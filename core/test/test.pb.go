// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/test/test.proto

package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Lang code per ISO 639-1
type Lang int32

const (
	// English (default)
	Lang_en Lang = 0
	// French
	Lang_fr Lang = 1
	// Spanish
	Lang_es Lang = 2
	// German
	Lang_de Lang = 3
	// Dutch
	Lang_nl Lang = 4
)

var Lang_name = map[int32]string{
	0: "en",
	1: "fr",
	2: "es",
	3: "de",
	4: "nl",
}
var Lang_value = map[string]int32{
	"en": 0,
	"fr": 1,
	"es": 2,
	"de": 3,
	"nl": 4,
}

func (x Lang) String() string {
	return proto.EnumName(Lang_name, int32(x))
}
func (Lang) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_test_7ff050f49f8a84f5, []int{0}
}

type MediaType int32

const (
	MediaType_unknown MediaType = 0
	// `dispute_files` specifies type of file uploads that will be used as attachments
	// in dispute chat messages.
	MediaType_dispute_files MediaType = 10
	// `chat_files` specifies type of file uploads that will be used as attachments
	// in regular host-guest and group chats.
	MediaType_chat_files MediaType = 11
	// `photos` specifies type of file uploads that will be used as gallery items
	// for listing creation.
	MediaType_photos MediaType = 12
	// `review_photos` specifies type of file uploads that will be used as attachments
	// in reviews from guests.
	MediaType_review_photos MediaType = 13
	// `avatars` specifies type of file uploads that will be used as avatar images.
	MediaType_avatars MediaType = 14
)

var MediaType_name = map[int32]string{
	0:  "unknown",
	10: "dispute_files",
	11: "chat_files",
	12: "photos",
	13: "review_photos",
	14: "avatars",
}
var MediaType_value = map[string]int32{
	"unknown":       0,
	"dispute_files": 10,
	"chat_files":    11,
	"photos":        12,
	"review_photos": 13,
	"avatars":       14,
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_test_7ff050f49f8a84f5, []int{1}
}

// ID is a type that requires a field to have unique value that can later will be used
// for indexed lookups and aggregations.
// type string ID;
type ID struct {
	// The string value.
	V                    string   `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_7ff050f49f8a84f5, []int{0}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (dst *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(dst, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

// DisplayLocale sets user locale preferences, the backend
// will format responses to match these preferences.
type DisplayLocale struct {
	// lang code according to ISO 639-1
	Lang Lang `protobuf:"varint,1,opt,name=lang,proto3,enum=Lang" json:"lang,omitempty"`
	// region as string
	Region *wrappers.StringValue `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// desired currency name
	Currency             *wrappers.StringValue `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DisplayLocale) Reset()         { *m = DisplayLocale{} }
func (m *DisplayLocale) String() string { return proto.CompactTextString(m) }
func (*DisplayLocale) ProtoMessage()    {}
func (*DisplayLocale) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_7ff050f49f8a84f5, []int{1}
}
func (m *DisplayLocale) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisplayLocale.Unmarshal(m, b)
}
func (m *DisplayLocale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisplayLocale.Marshal(b, m, deterministic)
}
func (dst *DisplayLocale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayLocale.Merge(dst, src)
}
func (m *DisplayLocale) XXX_Size() int {
	return xxx_messageInfo_DisplayLocale.Size(m)
}
func (m *DisplayLocale) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayLocale.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayLocale proto.InternalMessageInfo

func (m *DisplayLocale) GetLang() Lang {
	if m != nil {
		return m.Lang
	}
	return Lang_en
}

func (m *DisplayLocale) GetRegion() *wrappers.StringValue {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *DisplayLocale) GetCurrency() *wrappers.StringValue {
	if m != nil {
		return m.Currency
	}
	return nil
}

// PhotoResolution specifies Width and Height for a photo thumbnail. Must be in WxH format.
type PhotoResolution struct {
	// Width of photo, optional
	W *wrappers.Int32Value `protobuf:"bytes,1,opt,name=W,json=w,proto3" json:"W,omitempty"`
	// Height of photo, optional
	H                    *wrappers.Int32Value `protobuf:"bytes,2,opt,name=H,json=h,proto3" json:"H,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PhotoResolution) Reset()         { *m = PhotoResolution{} }
func (m *PhotoResolution) String() string { return proto.CompactTextString(m) }
func (*PhotoResolution) ProtoMessage()    {}
func (*PhotoResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_7ff050f49f8a84f5, []int{2}
}
func (m *PhotoResolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhotoResolution.Unmarshal(m, b)
}
func (m *PhotoResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhotoResolution.Marshal(b, m, deterministic)
}
func (dst *PhotoResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotoResolution.Merge(dst, src)
}
func (m *PhotoResolution) XXX_Size() int {
	return xxx_messageInfo_PhotoResolution.Size(m)
}
func (m *PhotoResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotoResolution.DiscardUnknown(m)
}

var xxx_messageInfo_PhotoResolution proto.InternalMessageInfo

func (m *PhotoResolution) GetW() *wrappers.Int32Value {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *PhotoResolution) GetH() *wrappers.Int32Value {
	if m != nil {
		return m.H
	}
	return nil
}

// File represents an uploaded file.
type File struct {
	// FileID is an unique file hash.
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// ParentID of the object containing a reference to this file, e.g. a gallery ID.
	ParentId *wrappers.StringValue `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// OwnerID is an Account ID of the file owner.
	OwnerId *wrappers.StringValue `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// Name is the filename of the uploaded resource.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// SizeBytes is filesize in bytes.
	SizeBytes int64 `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// MediaType specifies media type of this file
	MediaType MediaType `protobuf:"varint,6,opt,name=media_type,json=mediaType,proto3,enum=MediaType" json:"media_type,omitempty"`
	// ContentType is the standard content type specifier.
	ContentType *wrappers.StringValue `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// CreatedAt contains timestamp file has been uploaded on.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ContentURL is a link to the original file, if it must not be processed (i.e. document).
	ContentUrl *wrappers.StringValue `protobuf:"bytes,9,opt,name=content_url,json=contentUrl,proto3" json:"content_url,omitempty"`
	// Thumbnails contains a map of resized photo per different photo resolution
	Thumbnails           map[string]string `protobuf:"bytes,10,rep,name=thumbnails,proto3" json:"thumbnails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_7ff050f49f8a84f5, []int{3}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *File) GetParentId() *wrappers.StringValue {
	if m != nil {
		return m.ParentId
	}
	return nil
}

func (m *File) GetOwnerId() *wrappers.StringValue {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *File) GetMediaType() MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaType_unknown
}

func (m *File) GetContentType() *wrappers.StringValue {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *File) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *File) GetContentUrl() *wrappers.StringValue {
	if m != nil {
		return m.ContentUrl
	}
	return nil
}

func (m *File) GetThumbnails() map[string]string {
	if m != nil {
		return m.Thumbnails
	}
	return nil
}

func init() {
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*DisplayLocale)(nil), "DisplayLocale")
	proto.RegisterType((*PhotoResolution)(nil), "PhotoResolution")
	proto.RegisterType((*File)(nil), "File")
	proto.RegisterMapType((map[string]string)(nil), "File.ThumbnailsEntry")
	proto.RegisterEnum("Lang", Lang_name, Lang_value)
	proto.RegisterEnum("MediaType", MediaType_name, MediaType_value)
}

func init() { proto.RegisterFile("core/test/test.proto", fileDescriptor_test_7ff050f49f8a84f5) }

var fileDescriptor_test_7ff050f49f8a84f5 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6b, 0xdb, 0x3a,
	0x14, 0xc7, 0xaf, 0x13, 0x37, 0x89, 0x4f, 0xfa, 0xc3, 0x57, 0xf4, 0x72, 0x7d, 0x7b, 0xbb, 0x2d,
	0xe4, 0x29, 0xed, 0x83, 0x03, 0xe9, 0xc6, 0xda, 0x41, 0x19, 0x1b, 0xdd, 0x58, 0xa0, 0x83, 0xe1,
	0x75, 0xdb, 0xa3, 0x51, 0xec, 0x53, 0x47, 0xd4, 0x91, 0x8c, 0x24, 0x27, 0x78, 0x7f, 0xca, 0x1e,
	0xf7, 0x97, 0x0e, 0x29, 0x4a, 0x19, 0x2d, 0x8c, 0xbc, 0x58, 0x3a, 0xe7, 0x7c, 0xbe, 0x47, 0xe7,
	0xe8, 0xc8, 0x70, 0x98, 0x09, 0x89, 0x63, 0x8d, 0x4a, 0xdb, 0x4f, 0x5c, 0x49, 0xa1, 0xc5, 0xd1,
	0xd3, 0x42, 0x88, 0xa2, 0xc4, 0xb1, 0xb5, 0x66, 0xf5, 0xed, 0x78, 0x25, 0x69, 0x55, 0xa1, 0x54,
	0x2e, 0xfe, 0xec, 0x61, 0x5c, 0xb3, 0x05, 0x2a, 0x4d, 0x17, 0x95, 0x03, 0x8e, 0x1d, 0x40, 0x2b,
	0x36, 0xa6, 0x9c, 0x0b, 0x4d, 0x35, 0x13, 0xdc, 0xc9, 0x87, 0x04, 0x5a, 0xd3, 0x2b, 0xb2, 0x0b,
	0xde, 0x32, 0xf2, 0x06, 0xde, 0x28, 0x48, 0xbc, 0xe5, 0xf0, 0x87, 0x07, 0x7b, 0x57, 0x4c, 0x55,
	0x25, 0x6d, 0xae, 0x45, 0x46, 0x4b, 0x24, 0xff, 0x81, 0x5f, 0x52, 0x5e, 0x58, 0x64, 0x7f, 0xb2,
	0x13, 0x5f, 0x53, 0x5e, 0x24, 0xd6, 0x45, 0x9e, 0x43, 0x47, 0x62, 0xc1, 0x04, 0x8f, 0x5a, 0x03,
	0x6f, 0xd4, 0x9f, 0x1c, 0xc7, 0xeb, 0xf3, 0xe2, 0x4d, 0x41, 0xf1, 0x67, 0x2d, 0x19, 0x2f, 0xbe,
	0xd2, 0xb2, 0xc6, 0xc4, 0xb1, 0xe4, 0x1c, 0x7a, 0x59, 0x2d, 0x25, 0xf2, 0xac, 0x89, 0xda, 0x5b,
	0xe8, 0xee, 0xe9, 0x61, 0x01, 0x07, 0x9f, 0xe6, 0x42, 0x8b, 0x04, 0x95, 0x28, 0x6b, 0xd3, 0x0a,
	0x39, 0x01, 0xef, 0x9b, 0x2d, 0xad, 0x3f, 0xf9, 0xff, 0x51, 0x96, 0x29, 0xd7, 0x67, 0x93, 0x75,
	0x12, 0x6f, 0x65, 0xd0, 0x0f, 0xae, 0xd0, 0x3f, 0xa3, 0xf3, 0xe1, 0x4f, 0x1f, 0xfc, 0xf7, 0xac,
	0x44, 0xf2, 0x2f, 0x74, 0x6f, 0x59, 0x89, 0x29, 0xcb, 0xdd, 0x15, 0x75, 0x8c, 0x39, 0xcd, 0xc9,
	0x05, 0x04, 0x15, 0x95, 0xc8, 0xb5, 0x09, 0x6d, 0xd3, 0x7d, 0x6f, 0x8d, 0x4f, 0x73, 0xf2, 0x12,
	0x7a, 0x62, 0xc5, 0x51, 0x1a, 0xe5, 0x36, 0xfd, 0x77, 0x2d, 0x3d, 0xcd, 0x09, 0x01, 0x9f, 0xd3,
	0x05, 0x46, 0xbe, 0xad, 0xc4, 0xee, 0xc9, 0x13, 0x00, 0xc5, 0xbe, 0x63, 0x3a, 0x6b, 0x34, 0xaa,
	0x68, 0x67, 0xe0, 0x8d, 0xda, 0x49, 0x60, 0x3c, 0x6f, 0x8d, 0x83, 0x9c, 0x00, 0x2c, 0x30, 0x67,
	0x34, 0xd5, 0x4d, 0x85, 0x51, 0xc7, 0x8e, 0x10, 0xe2, 0x8f, 0xc6, 0x75, 0xd3, 0x54, 0x98, 0x04,
	0x8b, 0xcd, 0x96, 0xbc, 0x86, 0xdd, 0x4c, 0x70, 0x6d, 0x5a, 0xb2, 0x70, 0x77, 0x8b, 0xd2, 0xfa,
	0x4e, 0x61, 0x13, 0x5c, 0x00, 0x64, 0x12, 0xa9, 0xc6, 0x3c, 0xa5, 0x3a, 0xea, 0x59, 0xf9, 0xd1,
	0x23, 0xf9, 0xcd, 0xe6, 0x89, 0x26, 0x81, 0xa3, 0xdf, 0x68, 0x72, 0x09, 0x9b, 0x4c, 0x69, 0x2d,
	0xcb, 0x28, 0xd8, 0xe2, 0x68, 0x70, 0x82, 0x2f, 0xb2, 0x24, 0x2f, 0x00, 0xf4, 0xbc, 0x5e, 0xcc,
	0x38, 0x65, 0xa5, 0x8a, 0x60, 0xd0, 0x1e, 0xf5, 0x27, 0xff, 0xc4, 0x66, 0x80, 0xf1, 0xcd, 0xbd,
	0xff, 0x1d, 0xd7, 0xb2, 0x49, 0x7e, 0x03, 0x8f, 0x2e, 0xe1, 0xe0, 0x41, 0x98, 0x84, 0xd0, 0xbe,
	0xc3, 0xc6, 0xcd, 0xda, 0x6c, 0xc9, 0x21, 0xec, 0x2c, 0xcd, 0x81, 0x76, 0xc8, 0x41, 0xb2, 0x36,
	0x5e, 0xb5, 0xce, 0xbd, 0xd3, 0x18, 0x7c, 0xf3, 0x2f, 0x90, 0x0e, 0xb4, 0x90, 0x87, 0x7f, 0x99,
	0xf5, 0x56, 0x86, 0x9e, 0xb5, 0x55, 0xd8, 0x32, 0x6b, 0x8e, 0x61, 0xdb, 0xac, 0xbc, 0x0c, 0xfd,
	0xd3, 0x02, 0x82, 0xfb, 0x8b, 0x27, 0x7d, 0xe8, 0xd6, 0xfc, 0x8e, 0x8b, 0x95, 0x51, 0xfe, 0x0d,
	0x7b, 0x39, 0x53, 0x55, 0xad, 0x31, 0x35, 0xcf, 0x4b, 0x85, 0x40, 0xf6, 0x01, 0xb2, 0x39, 0xd5,
	0xce, 0xee, 0x13, 0x80, 0x4e, 0x65, 0x9e, 0xbe, 0x0a, 0x77, 0x0d, 0x2e, 0x71, 0xc9, 0x70, 0x95,
	0x3a, 0xd7, 0x9e, 0x49, 0x47, 0x97, 0x54, 0x53, 0xa9, 0xc2, 0xfd, 0x59, 0xc7, 0x5e, 0xd8, 0xd9,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xb9, 0x7d, 0xbc, 0x55, 0x04, 0x00, 0x00,
}
